# ------------------------------------------------------
#	Base Twig
#	(c) 2016 Inkton
#

source $NEST_FOLDER/utils/prefix

twig_links_begin() {
	NEST_BASE_VERSION=1.0
	NEST_RUN_TIMESTAMP=$(date "+%Y.%m.%d-%H.%M.%S")
	NEST_LANGUAGE=''
	NEST_LANGUAGE_VERSION=''

	if [ -z "$NEST_OPERATION" ]; then
		# default operation is up
		NEST_OPERATION=up
	fi

	if [ "$NEST_DB_VENDOR" = mysql ]; then
		NEST_BASE_PACKAGES='["mariadb-client"]'
	elif [ "$NEST_DB_VENDOR" = postgres ]; then
		NEST_BASE_PACKAGES='["postgresql-client"]'
	fi
}

link_twigs() {
	local to_init=twig_init_"$1"
	local to_init_func="$2"_init

	if function_exists "$to_init_func"; then
		eval "$to_init=$to_init_func"
	else
		eval "$to_init=null_callback"
	fi

	local to_shutdown=twig_shutdown_"$1"
	local to_shutdown_func="$2"_shutdown

	if function_exists "$to_init_func"; then
		eval "$to_shutdown=$to_shutdown_func"
	else
		eval "$to_shutdown=null_callback"
	fi

	local to_assign_b=twig_"$1"_before_"$NEST_OPERATION"
	local to_func_b="$2"_before_"$NEST_OPERATION"

	if function_exists "$to_func_b"; then
		eval "$to_assign_b='$to_func_b'"
	else
		eval "$to_assign_b=null_callback"
	fi

	local to_assign_a=twig_"$1"_after_"$NEST_OPERATION"
	local to_func_a="$2"_after_"$NEST_OPERATION"

	if function_exists "$to_func_a"; then
		eval "$to_assign_a='$to_func_a'"
	else
		eval "$to_assign_a=null_callback"
	fi
}

init_after() {
	local from=$1
	local call=twig_init_"$from"
	eval "\${$call}"
}

shutdown_before() {
	local from=$1
	local call=twig_shutdown_"$from"
	eval "\${$call}"
}

do_things() {
	local when=$1; local op=$2; local from=$3
	local call=twig_"$from"_"$when"_"$op"
	eval "\${$call}"
}

base_init() {
	yell "<- begin ->"; 
	source /etc/os-release
	init_after base
}

base_shutdown() {
	yell "<- end ->"; 
	shutdown_before base
}

twig_links_end()  {
	base_init
	eval $NEST_OPERATION
	base_shutdown
}

secure_access() {
	yell "securing access to the public area"

	try /usr/bin/sudo /bin/chown -R $NEST_APP_ADMIN_UID:$NEST_APP_GROUP $NEST_HOME
	try /usr/bin/sudo /bin/chown -R $NEST_APP_USER_UID:$NEST_APP_GROUP $NEST_FOLDER_PUBLIC

	# Change directory permissions rwxr-xr-x
	try find $NEST_FOLDER_PUBLIC -type d -exec /usr/bin/sudo /bin/chmod 775 {} \;
	# Change file permissions rw-r--r--
	try find $NEST_FOLDER_PUBLIC -type f -exec /usr/bin/sudo /bin/chmod 644 {} \;  
}

register_install() {
	try source $NEST_CUSHION_SETTINGS_PATH
	
	if [ $NEST_CUSHION_LANGUAGE != $NEST_LANGUAGE ]; then
		yell "remove the existing install using the $NEST_LANGUAGE twig before installing another lanuage type!"
		exit -1
	fi

	try echo "NEST_CUSHION_SITE_VERSION=1
NEST_CUSHION_APP=$NEST_APP
NEST_CUSHION_APP_VERSION=$NEST_APP_VERSION
NEST_CUSHION_LANGUAGE_FRAMEWORK=$NEST_LANGUAGE_FRAMEWORK
NEST_CUSHION_LANGUAGE_FRAMEWORK_VERSION=$NEST_LANGUAGE_FRAMEWORK_VERSION
NEST_CUSHION_LANGUAGE=$NEST_LANGUAGE
NEST_CUSHION_LANGUAGE_VERSION=$NEST_LANGUAGE_VERSION
" > $NEST_CUSHION_SETTINGS_PATH

} 

create() {
	yell "create app (run as root) .."	
	do_things before create base

	try cp "$NEST_FOLDER/conf/mime.types" "$NEST_APP_MIME_PATH"
	try cd $NEST_HOME

	try cat $NEST_APP_REGISTRY_PATH | \
		jq '.installed.application.name="'"$NEST_APP"'" ' | \
		jq '.installed.application.version="'"$NEST_APP_VERSION"'" ' | \
		jq '.installed.framework.name="'"$NEST_LANGUAGE_FRAMEWORK"'" ' | \
		jq '.installed.framework.version="'"$NEST_LANGUAGE_FRAMEWORK_VERSION"'" ' | \
		jq '.installed.language.name="'"$NEST_LANGUAGE"'" ' | \
		jq '.installed.language.version="'"$NEST_LANGUAGE_VERSION"'" ' \
		> $NEST_APP_REGISTRY_PATH.new

	try mv $NEST_APP_REGISTRY_PATH.new $NEST_APP_REGISTRY_PATH

	do_things after create base
}

prepare() {
	yell "prepare app (run as root) .."
	do_things before prepare base
	
	try touch $NEST_CUSHION_SETTINGS_PATH
	try /bin/chown -R $NEST_APP_ADMIN_UID:$NEST_APP_GROUP $NEST_CUSHION_SETTINGS_PATH
	try /bin/chmod +x $NEST_CUSHION_SETTINGS_PATH

	try touch $NEST_CUSHION_LOG_PATH
	try /bin/chmod +x $NEST_CUSHION_LOG_PATH

	do_things after prepare base
}

destroy() {
	yell "destroy app ..."
	do_things before destroy base

	try cat $NEST_APP_REGISTRY_PATH | \
		jq '.installed.application.name="'""'" ' | \
		jq '.installed.application.version="'""'" ' | \
		jq '.installed.framework.name="'""'" ' | \
		jq '.installed.framework.version="'""'" ' | \
		jq '.installed.language.name="'""'" ' | \
		jq '.installed.language.version="'""'" ' \
		> $NEST_APP_REGISTRY_PATH.new

	try mv $NEST_APP_REGISTRY_PATH.new $NEST_APP_REGISTRY_PATH

	do_things after destroy base
}

install() {
	yell "install app in cushion ..."
	do_things before install base

	run_cmd "/usr/bin/sudo /sbin/apk --update add" "$NEST_BASE_PACKAGES"

	do_things after install base

	register_install
	restore_db
	secure_access
}

update() {
	yell "update app in cushion ..."
	do_things before update base

	run_cmd "/usr/bin/sudo /sbin/apk update" "$NEST_BASE_PACKAGES"
	run_cmd "/usr/bin/sudo /sbin/apk cache -v sync"

	do_things after update base

	secure_access
}

upgrade() {
	yell "upgrade app in cushion ..."
	do_things before upgrade base

	run_cmd "/usr/bin/sudo /sbin/apk --update upgrade" "$NEST_BASE_PACKAGES"
	run_cmd "/usr/bin/sudo /sbin/apk cache -v sync"

	do_things after upgrade base

	secure_access
}

remove() {
	yell "remove app from cushion ..."
	do_things before remove base

	run_cmd "/usr/bin/sudo /sbin/apk del" "$NEST_BASE_PACKAGES"

	do_things after remove base

	rm -f $NEST_CUSHION_SETTINGS_PATH
	rm -f $NEST_CUSHION_LOG_PATH

	secure_access
}
  
info() {
	yell "base info of cushion ..."
	do_things before info base

	try /usr/bin/sudo /sbin/apk stats
	fly /usr/bin/sudo /sbin/apk -vv info|sort

	run_cmd "/usr/bin/sudo /sbin/apk version" "$NEST_BASE_PACKAGES"
	run_cmd "/usr/bin/sudo /sbin/apk audit" "$NEST_BASE_PACKAGES"

	cat $NEST_APP_SETTINGS_PATH

	do_things after info base
}

up() {
	do_things before up base

	do_things after up base
}

down() {
	yell "going down ..."

	# this event needs to complete within 1 sec
	# the job will be killed if it take any longer
	# time consuming jobs should be scheduled for
	# daily cron or other user submitted jobs

	do_things before down base
	do_things after down base                                                                                                  
}

change_db_password() {
	yell "backup db"

	try source $NEST_FOLDER/utils/db

	db_change_password
}

backup_db() {
	yell "backup db"

	try source $NEST_FOLDER/utils/db 

	db_backup_schema
	db_backup_data
}

restore_db() {
	yell "restore schema"

	try source $NEST_FOLDER/utils/db

	db_restore_schema
	db_restore_data	
}

daily() {
	yell "cron daily tasks ...";
	# called anytime between 0-1 HRS UTC
	
	do_things before daily base

	if [[ $(date +%u) -eq 1 ]] ; then
		yell "-> do weekly tasks "
	fi

	if [[ $(date +%d) -eq 1  ]]; then
		yell "-> do monthly tasks " 
	fi

	NEST_SITE_VERSION=$(cat $NEST_APP_REGISTRY_PATH | jq -r '.site.version')
	try source $NEST_CUSHION_SETTINGS_PATH

	yell "ugrade needed? cushion version $NEST_CUSHION_SITE_VERSION == site ver $NEST_SITE_VERSION ?  ..."		
	if [ $NEST_CUSHION_SITE_VERSION -ne $NEST_SITE_VERSION ]; then
		yell "cushion needs an update ..."
		NEST_OPERATION=update /bin/sh $NEST_APP_PATH
	fi

	do_things after daily base

	secure_access
}
